#!/bin/bash

script_name=`basename $0`
script_dir=`dirname $0`
version="???"
procwait="60"
nobackground="false"

if [ -f "$script_dir/VERSION" ] ; then
   version=`cat $script_dir/VERSION`
fi

function check_caffepredict {
  # assuming $1 is path to done_file
  done_file=$1
  if [ -f "$done_file" ] ; then
    check_caffepredict_res=`tail -n 1 "$done_file"`
    if [ -z "$check_merge_large_data_res" ] ; then
      check_caffepredict_res="0"
    fi
  else
    check_caffepredict_res=""
  fi
}

function fail_if_check_caffepredict_fails {
  done_file=$1
  if [ -n "$done_file" ] ; then
    check_caffepredict "$done_file"
    if [ -n "$check_caffepredict_res" ] ; then
      if [ "$check_caffepredict_res" -gt 0 ] ; then
        echo "ERROR, a non-zero exit code ($check_caffepredict_res) was receiv
ed from: caffepredict.sh on `dirname $done_file`"
        exit 11
      fi
   
    else
      echo "ERROR, no DONE file found for caffepredict.sh on `dirname $done_file`"
      exit 12  
    fi
  fi
}


function check_merge_large_data {
  # assuming $1 is path to done_file
  done_file=$1
  if [ -f "$done_file" ] ; then
    check_merge_large_data_res=`tail -n 1 "$done_file"`
    if [ -z "$check_merge_large_data_res" ] ; then
      check_merge_large_data_res="0"
    fi
  else
    check_merge_large_data_res=""
  fi
}

function fail_if_merge_largedata_fails {
  merge_done=$1
  if [ -n "$merge_done" ] ; then
  check_merge_large_data "$merge_done"
  if [ -n "$check_merge_large_data_res" ] ; then
    if [ "$check_merge_large_data_res" -gt 0 ] ; then
      echo "ERROR, a non-zero exit code ($check_merge_large_data_res) was receiv
ed from: Merge_LargeData.m `dirname $merge_done`"
      exit 13
    fi
  fi
fi
}


function usage()
{
    echo "usage: $script_name [-h]
                      predictdir

              Version: $version

              Runs caffe prediction on CDeep3M trained model using
              predict.config file to obtain location of trained
              model and image data

positional arguments:
  predictdir           Predict directory generated by
                       runprediction.sh

optional arguments:
  -h, --help           show this help message and exit
  --procwait           seconds to wait before checking on
                       background processes
  --sourcescript       If set, allows caller to source 
                       script for functions defined and silently
                       returns.
  --nobackground       Run all processes in serial fashion.

    " 1>&2;
   exit 1;
}

TEMP=`getopt -o h --long "help,procwait:,sourcescript,nobackground" -n '$0' -- "$@"`
eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h ) usage ;;
        --help ) usage ;;
        --sourcescript ) return 0 ;;
        --nobackground ) nobackground="true" ;;
        --procwait ) procwait=$2 ; shift 2 ;;
        --) shift ; break ;;
    esac
done

if [ $# -ne 1 ] ; then
  usage
fi

out_dir=$1

echo ""

predict_config="$out_dir/predict.config"

if [ ! -s "$predict_config" ] ; then
  echo "ERROR no $predict_config file found"
  exit 2
fi

trained_model_dir=`egrep "^ *trainedmodeldir *=" "$predict_config" | sed "s/^.*=//" | sed "s/^ *//"`

if [ -z "$trained_model_dir" ] ; then
  echo "ERROR unable to extract trainedmodeldir from $predict_config"
  exit 3
fi

img_dir=`egrep "^ *imagedir *=" "$predict_config" | sed "s/^.*=//" | sed "s/^ *//"`

if [ -z "$img_dir" ] ; then
  echo "ERROR unable to extract imagedir from $predict_config"
  exit 4
fi


model_list=`egrep "^ *models *=" "$predict_config" | sed "s/^.*=//" | sed "s/^ *//"`

if [ -z "$model_list" ] ; then
  echo "ERROR unable to extract models from $predict_config"
  exit 5
fi

aug_speed=`egrep "^ *augspeed *=" "$predict_config" | sed "s/^.*=//" | sed "s/^ *//"`

if [ -z "$aug_speed" ] ; then
  echo "ERROR unable to extract augspeed from $predict_config"
  exit 6
fi


echo "Running Prediction"
echo ""

echo "Trained Model Dir: $trained_model_dir"
echo "Image Dir: $img_dir"
echo "Models: $model_list"
echo "Speed: $aug_speed"
echo ""

package_proc_info="$out_dir/augimages/package_processing_info.txt"

if [ ! -s "$package_proc_info" ] ; then
  echo "ERROR $package_proc_info not found"
  exit 7
fi

cp "$out_dir/augimages/de_augmentation_info.mat" "$out_dir/."

if [ $? != 0 ] ; then
  echo "ERROR unable to copy $out_dir/augimages/de_augmentation_info.mat to $out_dir"
  exit 8
fi

cp "$out_dir/augimages/package_processing_info.txt" "$out_dir/."

if [ $? != 0 ] ; then
  echo "ERROR unable to copy $out_dir/augimages/package_processing_info.txt to $out_dir"
  exit 9
fi

num_pkgs=`head -n 3 $package_proc_info | tail -n 1`
num_zstacks=`tail -n 1 $package_proc_info`
let tot_pkgs=$num_pkgs*$num_zstacks


caffe_done=""
prev_merge_done=""
# name of previous model
for model_name in `echo "$model_list" | sed "s/,/ /g"` ; do
  
  echo "Running $model_name predict $tot_pkgs package(s) to process"
  let cntr=1
  for CUR_PKG in `seq -w 001 $num_pkgs` ; do
    for CUR_Z in `seq -w 01 $num_zstacks` ; do
      pkg_name="Pkg${CUR_PKG}_Z${CUR_Z}"
      Z="$out_dir/augimages/$model_name/$pkg_name"
      out_pkg="$out_dir/$model_name/$pkg_name"
      if [ -f "$out_pkg/DONE" ] ; then
        echo "  Found $out_pkg/DONE. Prediction completed. Skipping..."
        continue
      fi

      echo "  Processing $pkg_name $cntr of $tot_pkgs"
      augoutfile="$Z/out.log"
      echo "Running PreprocessPackage.m in background"
      PreprocessPackage.m "$img_dir" "$out_dir/augimages" $CUR_PKG $CUR_Z $model_name $aug_speed > "$augoutfile" 2>&1 &
      if [ "$nobackground" == "true" ] ; then
        echo "Running serially waiting for PreprocessPackage.m to finish"
        wait
      fi

      pre_process_done="$Z/DONE"
      while [ ! -f "$pre_process_done" ] ; do
        echo "Waiting $procwait seconds for $pre_process_done file to appear"
        sleep $procwait
        num_preprocs=`ps --ppid $$ | grep Preproc | wc -l`
        if [ "$num_preprocs" -eq 0 ] ; then
           echo "No child process with name starting with Preproc found"
           if [ ! -f "$pre_process_done" ] ; then
             echo "ERROR no running PreprocessPackage.m found and no $pre_process_done file"
             exit 10
           fi
           break
        fi
      done

      if [ -n "$caffe_done" ] ; then
        echo "Checking if caffepredict.sh processing on `dirname $caffe_done` has completed"
        while [ ! -f "$caffe_done" ] ; do
          echo "Waiting $procwait seconds for $caffe_done file to appear"
          sleep $procwait
          num_preprocs=`ps --ppid $$ | grep caffe | wc -l`
          if [ "$num_preprocs" -eq 0 ] ; then
            echo "No child process with name starting with caffe found"
            break
          fi
        done
        fail_if_check_caffepredict_fails "$caffe_done"
      fi
      caffe_done="$out_pkg/DONE"

      /usr/bin/time -p caffepredict.sh "$trained_model_dir/$model_name/trainedmodel" "$Z" "$out_pkg" &
      
      if [ "$nobackground" == "true" ] ; then
        echo "Running serially waiting for caffepredict.sh to finish"
        wait
      fi

      let cntr+=1
    done
  done

  check_merge_large_data "$out_dir/$model_name/DONE"
  if [ -n "$check_merge_large_data_res" ] ; then  
    if [ "$check_merge_large_data_res" -eq 0 ] ; then
      echo "Found $out_dir/$model_name/DONE Merge completed. Skipping..."
      continue
    fi
  fi

  fail_if_merge_largedata_fails "$prev_merge_done"  

  echo ""
  echo "Running Merge_LargeData.m $out_dir/$model_name"
  merge_log="$out_dir/$model_name/merge.log"
  Merge_LargeData.m "$out_dir/$model_name" >> "$merge_log" 2>&1 &
  if [ "$nobackground" == "true" ] ; then
    echo "Running serially waiting for Merge_LargeData.m to finish"
    wait
  fi

  prev_merge_done="$out_dir/$model_name/DONE"
done

wait

# fail if prediction fails
echo "Checking if caffepredict.sh processing on `dirname $caffe_done` has completed"
fail_if_check_caffepredict_fails "$caffe_done"

# check merge_largedata succeeded
for model_name in `echo "$model_list" | sed "s/,/ /g"` ; do
  merge_done="$out_dir/$model_name/DONE"
  if [ ! -f "$merge_done" ] ; then
    echo "ERROR, no DONE file generated from: Merge_LargeData.m `dirname $merge_done`"
    exit 13
  fi
  fail_if_merge_largedata_fails "$merge_done"
done

echo ""
echo "Prediction has completed. Have a nice day!"
echo ""
