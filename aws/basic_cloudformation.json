{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Deep3m template. Creates an EC2 ubuntu instance off of a base Amazon Deep Learning AMI and installs necessary software to run Deep3M image segmentation. This template provides ssh access to the machine created. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "GPUInstanceType": {
            "Description": "GPU EC2 instance type",
            "Type": "String",
            "Default": "p2.xlarge",
            "AllowedValues": [
                "p2.xlarge",
                "p3.2xlarge",
                "m5.2xlarge",
                "m4.2xlarge",
                "r3.xlarge",
                "i3.xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 GPU instance type."
        },
        "GPUDiskSize": {
            "Description": "Size of GPU EC2 instance disk in gigabytes",
            "Type": "Number",
            "Default": "100",
            "MinValue": "50",
            "ConstraintDescription": "must be a whole number 50 or larger"
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
	
    },
    "Mappings" : {
       "RegionMap" : {
           "ap-south-1"    : { "AMI" : "ami-6a024a05"},
           "eu-west-1"    : { "AMI" : "ami-2e269e57"},
           "ap-northeast-2"    : { "AMI" : "ami-3097315e"},
           "ap-northeast-1"    : { "AMI" : "ami-fff07199"},
           "ap-southeast-1"    : { "AMI" : "ami-0746217b"},
           "ap-southeast-2"    : { "AMI" : "ami-fbfe0999"},
           "eu-central-1"    : { "AMI" : "ami-540f863b"},
           "us-east-1"    : { "AMI" : "ami-c4701dbe"},
           "us-east-2"    : { "AMI" : "ami-67dbf202"},
           "us-west-2"    : { "AMI" : "ami-bcce6ac4"}
       }       
    },
    "Resources": {
        "GPUInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "GPUInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [ "RegionMap",
                        { "Ref": "AWS::Region" }, "AMI" ]
                    
                },
                "BlockDeviceMappings" : [
                    {
                      "DeviceName" : "/dev/sda1",
                      "Ebs" : { 
                                 "VolumeSize" : { "Ref": "GPUDiskSize" },
                                 "VolumeType" : "gp2"
                              }
                    }
                ],
                "Tags" : [ 
                    {
                      "Key" : "Name", "Value" : { "Ref": "AWS::StackName" } 
                    }
                ],
                "UserData"    : { "Fn::Base64" : { "Fn::Join" : [ "", [
                     "#!/bin/bash\n\n",
                     "echo 'Installing octave'\n",
                     "apt-get update\n",
                     "ecode=100\n",
                     "while [ $ecode -ne 0 ]\n",
                     "do\n",
                     "  apt-get -y install octave octave-image octave-pkg-dev git python-pip unzip\n",
                     "  ecode=$?\n",
                     "  echo 'Sleeping 1 second'\n",
                     "  sleep 1\n",
                     "done\n\n",
                     "echo 'Done installing octave'\n",
                     "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz -y\n",
                     "sudo -u ubuntu echo 'export PATH=$PATH:/home/ubuntu/deep3m:/home/ubuntu/caffe_nd_sense_segmentation/build/tools' >> /home/ubuntu/.bashrc\n",
                     "cd /home/ubuntu\n",
                     "sudo -u ubuntu git clone https://github.com/coleslaw481/caffe_nd_sense_segmentation.git\n",
                     "cd /home/ubuntu/caffe_nd_sense_segmentation\n",
                     "sudo -u ubuntu cp Makefile.config.example Makefile.config\n",
                     "sudo -u ubuntu sed -i 's/ \\/usr\\/local\\/include/\\/usr\\/local\\/include \\/usr\\/include\\/hdf5\\/serial\\//g' Makefile.config\n",
                     "sudo -u ubuntu sed -i 's/^# OPENCV_VERSION := 3/OPENCV_VERSION := 3/g' Makefile.config\n",
                     "sudo -u ubuntu sed -i 's/hdf5/hdf5_serial/g' Makefile\n",
                     "sudo -u ubuntu make -j 2 all\n",
                     "cd ..\n",
                     "sudo -u ubuntu wget https://github.com/stegro/hdf5oct/archive/b047e6e611e874b02740e7465f5d139e74f9765f.zip\n",
                     "sudo -u ubuntu unzip b047e6e611e874b02740e7465f5d139e74f9765f.zip\n",
                     "cd hdf5oct-*\n",
                     "sudo -u ubuntu make\n",
                     "make install\n",
                     "cd /home/ubuntu\n",
                     "wget https://s3-us-west-2.amazonaws.com/deep3m-releases/latest-version\n",
                     "export DEEP3M_VERSION='@@VERSION@@'\n",
                     "wget https://s3-us-west-2.amazonaws.com/deep3m-releases/${DEEP3M_VERSION}/deep3m-${DEEP3M_VERSION}.tar.gz\n",
                     "tar -xf deep3m-${DEEP3M_VERSION}.tar.gz\n",
                     "ln -s /home/ubuntu/deep3m-${DEEP3M_VERSION} /home/ubuntu/deep3m\n",
                     "cd /home/ubuntu\n",
                     "wget https://github.com/bats-core/bats-core/archive/v0.4.0.tar.gz\n",
                     "tar -zxf v0.4.0.tar.gz\n",
                     "cd bats-core-0.4.0\n",
                     "./install.sh /usr/local\n",
                     "echo 'Done with update'\n",
                     "/usr/local/bin/cfn-signal --exit-code 0 -i gpu1 '", { "Ref" : "WaitHandle" }, "'\n"
                       ]]}}
            }, 
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4ad8b7df-e9a7-4256-9ab2-9f548d4bb695"
                }
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access via port 22",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "85d8cb29-8b24-41c8-bca9-498f219d2b6e"
                }
            }
        },
        "WaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {
            }
        },
        "WaitCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "GPUInstance",
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandle" },
                "Timeout" : "4500"
            }
        }
    },
    "Outputs": {
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "GPUInstance"
            }
        },
        "AZ": {
            "Description": "Availability Zone of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "GPUInstance",
                    "AvailabilityZone"
                ]
            }
        },
        "PublicDNS": {
            "Description": "Public DNSName of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "GPUInstance",
                    "PublicDnsName"
                ]
            }
        },
        "PublicIP": {
            "Description": "Public IP address of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "GPUInstance",
                    "PublicIp"
                ]
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Designer": {
            "85d8cb29-8b24-41c8-bca9-498f219d2b6e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "4ad8b7df-e9a7-4256-9ab2-9f548d4bb695": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "85d8cb29-8b24-41c8-bca9-498f219d2b6e"
                ]
            }
        }
    }
}
