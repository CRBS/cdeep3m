Bootstrap: debootstrap
MirrorURL: http://us.archive.ubuntu.com/ubuntu
OSVersion: xenial

%help
Recipe to build cdeep3m signularity image for use on SDSC comet, refer to https://github.com/crbs/cdeep3m for more info

%labels

    Authors Chris Churas(churas.camera@gmail.com), Adrian Borchardt(aborchardt@ucsd.edu), Marty Kandes (mkandes@sdsc.edu)
    Application cdeep3m(https://github.com/crbs/cdeep3m)
    Inital_Build 10-02-2018
    Last_Update 10-12-2018
    Notes Uses docker image of ubuntu:xenial to build a cdeep3m singularity ubuntu image with cuda 9.2.88
    SYSTEM_NAME comet
    SYSTEM_SINGULARITY_VERSION 2.5.2
    SYSTEM_URL http://www.sdsc.edu/support/user_guides/comet.html

%setup

%environment

    # Set system locale
    LC_ALL=C
    LANG=en_US    
    PATH="/usr/local/cuda-9.2/bin:/global/cdeep3m:/global/caffe_nd_sense_segmentation/build/tools${PATH:+:${PATH}}"
    LD_LIBRARY_PATH="/usr/local/cuda-9.2/lib64:/usr/local/cuda/extras/CUPTI/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
    CDEEP3M_VERSION=1.6.2
    CAFFE_PATH=/global/caffe_nd_sense_segmentation
    export LC_ALL LANG PATH LD_LIBRARY_PATH CDEEP3M_VERSION CAFFE_PATH

%post -c /bin/bash

    ##############################################################################################
    ## EVERYTHING FOR CUDA INSTALL TAKEN FROM CUDA IMAGE TEMPLATE FROM SDSC COMET - SEE AUTHORS ##
    ##############################################################################################

    # Set system locale
    export LC_ALL=C

    # Install system metapackages
    apt-get -y install ubuntu-standard
    apt-get -y install ubuntu-server

    # Add repositories
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security restricted"

    # Upgrade all packages to their latest versions
    apt-get -y update && apt-get -y upgrade

    # Install common packages from 'main'
    apt-get -y install autoconf
    apt-get -y install automake
    apt-get -y install build-essential
    apt-get -y install cmake
    apt-get -y install libtool
    apt-get -y install pkg-config
    apt-get -y install gfortran
    apt-get -y install zip

    # Install expect to automate responses for interactive build questions
    apt-get -y install expect

    # Use /tmp to store temporary files within the container during the
    # bootstraping process
    cd /tmp

    # Install miniconda2
    wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh
    chmod +x Miniconda2-latest-Linux-x86_64.sh
    ./Miniconda2-latest-Linux-x86_64.sh -b -p /opt/miniconda2

    # Install miniconda3
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
    chmod +x Miniconda3-latest-Linux-x86_64.sh
    ./Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3

    # Location of NVIDIA repositories
    declare -r NVIDIA_ROOT_URL='http://developer.download.nvidia.com/compute'
    declare -r CUDA_REPO_URL="${NVIDIA_ROOT_URL}/cuda/repos/ubuntu1604/x86_64"
    declare -r ML_REPO_URL="${NVIDIA_ROOT_URL}/machine-learning/repos/ubuntu1604/x86_64/"

    # Install NVIDIA package dependencies
    apt-get -y install x11-common
    apt-get -y install xserver-xorg-core
    apt-get -y install xserver-xorg-legacy
    apt-get -y install cmake
    apt-get -y install make
    apt-get -y install dkms
    apt-get -y install linux-libc-dev
    apt-get -y install libc6-dev
    apt-get -y install lib32gcc1
    apt-get -y install libc6-i386
    apt-get -y install libgl1
    apt-get -y install libwayland-client0
    apt-get -y install libwayland-server0
    apt-get -y install pkg-config
    apt-get -y install screen-resolution-extra
    apt-get -y install libvdpau1
    apt-get -y install libatk1.0-0
    apt-get -y install libcairo-gobject2
    apt-get -y install libcairo2
    apt-get -y install libfontconfig1
    apt-get -y install libgdk-pixbuf2.0-0
    apt-get -y install libgtk-3-0
    apt-get -y install libgtk2.0-0
    apt-get -y install libjansson4
    apt-get -y install freeglut3-dev
    apt-get -y install libx11-dev
    apt-get -y install libxmu-dev
    apt-get -y install libxi-dev
    apt-get -y install libglu1-mesa
    apt-get -y install libglu1-mesa-dev
    apt-get -y install default-jre

    # Download NVIDIA drivers, libraries, and packages
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-396_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-396-dev_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-modprobe_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libcuda1-396_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-libopencl1-396_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-opencl-icd-396_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libxnvctrl0_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-settings_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-drivers_396.26-1_amd64.deb"

    wget --wait=10 "${CUDA_REPO_URL}/cuda-license-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-misc-headers-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvcc-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cuobjdump-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvprune-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-compiler-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-core-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cudart-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-driver-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cudart-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvdisasm-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-gdb-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvprof-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-memcheck-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cupti-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-gpu-library-advisor-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvtx-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-command-line-tools-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvrtc-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvrtc-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvml-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvgraph-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvgraph-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusolver-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusolver-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cublas-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cublas-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cufft-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cufft-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-curand-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-curand-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusparse-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusparse-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-npp-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-npp-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-samples-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-documentation-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nsight-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvvp-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-visual-tools-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-tools-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-libraries-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-toolkit-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-libraries-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-runtime-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-demo-suite-9-2_9.2.88-1_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/libcudnn7_7.2.1.38-1+cuda9.2_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/libcudnn7-dev_7.2.1.38-1+cuda9.2_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/libnccl2_2.3.4-1+cuda9.2_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/libnccl-dev_2.3.4-1+cuda9.2_amd64.deb"

    # Fix for "update-alternatives: error: error creating symbolic link '/usr/lib/nvidia/alternate-install-present.dpkg-tmp': No such file or directory"
    mkdir -p /usr/lib/nvidia

    # Install NVIDIA drivers, libraries, and packages
    dpkg -i nvidia-396_396.26-0ubuntu1_amd64.deb
    dpkg -i nvidia-396-dev_396.26-0ubuntu1_amd64.deb
    dpkg -i nvidia-modprobe_396.26-0ubuntu1_amd64.deb
    dpkg -i libcuda1-396_396.26-0ubuntu1_amd64.deb
    dpkg -i nvidia-libopencl1-396_396.26-0ubuntu1_amd64.deb
    dpkg -i nvidia-opencl-icd-396_396.26-0ubuntu1_amd64.deb
    dpkg -i libxnvctrl0_396.26-0ubuntu1_amd64.deb
    dpkg -i nvidia-settings_396.26-0ubuntu1_amd64.deb
    dpkg -i cuda-drivers_396.26-1_amd64.deb

    dpkg -i cuda-license-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-misc-headers-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvcc-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cuobjdump-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvprune-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-compiler-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-core-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cudart-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-driver-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cudart-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvdisasm-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-gdb-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvprof-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-memcheck-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cupti-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-gpu-library-advisor-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvtx-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-command-line-tools-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvrtc-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvrtc-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvml-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvgraph-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvgraph-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cusolver-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cusolver-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cublas-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cublas-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cufft-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cufft-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-curand-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-curand-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cusparse-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cusparse-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-npp-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-npp-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-samples-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-documentation-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nsight-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvvp-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-visual-tools-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-tools-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-libraries-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-toolkit-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-libraries-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-runtime-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-demo-suite-9-2_9.2.88-1_amd64.deb

    dpkg -i libcudnn7_7.2.1.38-1+cuda9.2_amd64.deb
    dpkg -i libcudnn7-dev_7.2.1.38-1+cuda9.2_amd64.deb

    dpkg -i libnccl2_2.3.4-1+cuda9.2_amd64.deb
    dpkg -i libnccl-dev_2.3.4-1+cuda9.2_amd64.deb

    # Set paths to CUDA binaries and libraries
    export PATH="/usr/local/cuda-9.2/bin${PATH:+:${PATH}}"
    export LD_LIBRARY_PATH="/usr/local/cuda-9.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/cuda/extras/CUPTI/lib64"
    
    # Update database for mlocate
    updatedb

    #########################################################
    ## EVERYTHING BELOW IS TO SATISFY CDEEP3M REQUIREMENTS ##
    #########################################################

    # /global is where cdeep3m and caffe will reside
    mkdir /global
    chmod 777 /global

    ############################################
    ## UPDATE APTITUDE THEN UPDATE THE SYSTEM ##
    ############################################
    apt-get -y update
    apt-get -y upgrade

    ################################
    ## PACKAGES NEEDED FOR CDEEP3M #
    ################################
    apt-get -y install octave octave-image octave-pkg-dev git wget python-pip unzip parallel python-opencv protobuf-compiler libprotobuf-dev mlocate vim graphicsmagick graphicsmagick-dbg

    ###########################
    # CAFFE SPECIFIC PACKAGES #
    ###########################

    # FOR UBUNTU >= 17.04 ONLY - COMMENT BELOW < 17.04 AND UNCOMMENT THIS
    # apt build-dep caffe-cuda

    # UBUNTU < 17.04
    apt-get -y install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler python-dev
    apt-get -y install --no-install-recommends libboost-all-dev
    apt-get -y install libgflags-dev libgoogle-glog-dev liblmdb-dev
    apt-get -y install build-essential cmake pkg-config
    apt-get -y install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev

    # BLAS: install ATLAS by sudo apt-get install libatlas-base-dev
    # or install OpenBLAS by sudo apt-get install libopenblas-dev or MKL for better CPU performance.
    apt-get -y install libatlas-base-dev
    
    ##########
    ## PIPs ##
    ##########
    pip install --upgrade pip
    ## BROKEN AFTER UPDATE, SO FIX
    sed -i 's/from pip import main/from pip._internal import main/g' /usr/bin/pip
    pip install joblib
    pip install requests
    pip install Cython
    pip install numpy
    pip install scipy
    pip install scikit-image
    pip install matplotlib
    pip install ipython
    pip install h5py
    pip install leveldb
    pip install networkx
    pip install nose
    pip install pandas
    pip install python-dateutil
    pip install protobuf
    pip install python-gflags
    pip install pyyaml
    pip install Pillow
    pip install six
    # UNCOMMENT BELOW FOR OPENCV3 SEE CAFFE COMPILE SEGMENT BELOW FOR FOR ADDITIONAL CHANGES
    # pip install opencv-contrib-python
    ldconfig

    ##########
    ## HDF5 ##
    ##########
    cd /global
    wget https://github.com/stegro/hdf5oct/archive/b047e6e611e874b02740e7465f5d139e74f9765f.zip
    unzip b047e6e611e874b02740e7465f5d139e74f9765f.zip
    cd hdf5oct-*
    make
    make install
    cd ..
    /bin/rm -rf hdf5oct*
    /bin/rm -f b047e6e611e874b02740e7465f5d139e74f9765f.zip

    ##########
    ## BATS ##
    ##########
    cd /global
    wget https://github.com/bats-core/bats-core/archive/v0.4.0.tar.gz
    tar -zxf v0.4.0.tar.gz
    cd bats-core-0.4.0
    ./install.sh /usr/local
    cd ..
    /bin/rm -rf bats*
    /bin/rm -f v0.4.0.tar.gz

    ###########
    ## CAFFE ##
    ###########
    cd /global
    git clone https://github.com/coleslaw481/caffe_nd_sense_segmentation.git
    cd /global/caffe_nd_sense_segmentation
    cp Makefile.config.example Makefile.config
    sed -i 's/\/usr\/local\/include/\/usr\/local\/include \/usr\/include\/hdf5\/serial/g' Makefile.config
    sed -i 's/hdf5/hdf5_serial/g' Makefile
    # FOR OPENCV VERSION 3 UNCOMMENT 3 sed LINES BELOW AND MAKE SURE THE PIP PORTION
    # HIGHER UP HAS THE pip install opencv-contrib-python UNCOMMENTED AS WELL
    # NEED TO MAKE LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib
    # THIS: LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/include/opencv
    # IN MAKEFILE.CONFIG
    # sed -i 's/\/usr\/local\/lib\ /\/usr\/local\/lib \/usr\/include\/opencv /g' Makefile.config
    # sed -i 's/^# OPENCV_VERSION := 3/OPENCV_VERSION := 3/g' Makefile.config
    # sed -i 's/LIBRARIES += opencv_imgcodecs//g' Makefile
    make -j 8 all

    #############
    ## CDEEP3M ##
    #############
    cd /global
    export CDEEP3M_VERSION=1.6.2
    wget https://s3-us-west-2.amazonaws.com/cdeep3m-releases/${CDEEP3M_VERSION}/cdeep3m-${CDEEP3M_VERSION}.tar.gz
    tar -xf cdeep3m-${CDEEP3M_VERSION}.tar.gz
    /bin/rm -f cdeep3m-${CDEEP3M_VERSION}.tar.gz
    ln -s /global/cdeep3m-${CDEEP3M_VERSION} /global/cdeep3m
    #mv /global/cdeep3m/motd ${SINGULARITY_ROOTFS}/etc/.

    #####################
    ## MOUNTS ON COMET ##
    #####################
    mkdir /cvmfs /oasis /projects /scratch

%files

%runscript

    echo "#######################################################################"
    echo "                                                                       "
    echo "   ######  ########  ######## ######## ########   #######  ##     ##   "
    echo "  ##    ## ##     ## ##       ##       ##     ## ##     ## ###   ###   "
    echo "  ##       ##     ## ##       ##       ##     ##        ## #### ####   "
    echo "  ##       ##     ## ######   ######   ########   #######  ## ### ##   "
    echo "  ##       ##     ## ##       ##       ##               ## ##     ##   "
    echo "  ##    ## ##     ## ##       ##       ##        ##     ## ##     ##   "
    echo "   ######  ########  ######## ######## ##         #######  ##     ##   "
    echo "                                                                       "
    echo "#######################################################################"

%test
